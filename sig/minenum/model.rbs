module Minenum
  module Model
    module AccessorAdder
      def self?.add: (untyped, untyped, Hash[Symbol, Minenum::Model::Reflection], Minenum::Model::Reflection) -> void
      def self?.add_singleton_method: (untyped, Minenum::Model::Reflection, Symbol) -> void
      def self?.add_getter: (untyped, Symbol) -> void
      def self?.add_setter: (untyped, Symbol) -> void
    end

    module ClassMethods
      def enum: (String | Symbol, Hash[String | Symbol, untyped]) -> void
      def _minenum_reflections: -> Hash[Symbol, untyped]

      private

      def _minenum_enum: (String | Symbol, Hash[String | Symbol, untyped], Module, Hash[Symbol, Minenum::Model::Reflection], ?adapter_builder: untyped) -> void
      def _minenum_methods_module: -> Module

      def include: (Module) -> self
    end

    module InstanceMethods
      private

      def _minenum_enum: (Symbol) -> untyped

      def self._minenum_reflections: -> Hash[Symbol, untyped]
    end
  end
end
